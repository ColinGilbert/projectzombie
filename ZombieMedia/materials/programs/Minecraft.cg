//#define BIAS 0
#define SKY 1
#define FULLBAND 1
struct VS_OUT
{
  float4 pos : POSITION;
  float4 worldPos : TEXCOORD2;
  float4 textureAtlasOffset : TEXCOORD1;
};

void caster_vs(
	       float4 position : POSITION,
	       out float4 oPosition : POSITION,
	       out float2 oDepth : TEXCOORD0,
	       uniform float4x4 wvpMat)
{
  oPosition = mul(wvpMat, position);
  oDepth.x = oPosition.z;
  oDepth.y = oPosition.w;
}

void caster_ps(
	       float2 depth : TEXCOORD0,
	       out float4 oColour : COLOR,
	       uniform float4 pssmSplitPoints)
{
  float finalDepth = -0.35f + depth.x / depth.y;
  oColour = float4(finalDepth, finalDepth, finalDepth, 1);
}

//#define NUM_OF_COEF 3
//#if TEXTURE_ATLAS
#define ATLAS_WIDTH 4096.0
#define TEX_WIDTH 256.0
#define eOffset TEX_WIDTH / ATLAS_WIDTH
//#endif

VS_OUT main_vp(
	       float4 pos : POSITION,
	       float4 uv1 : TEXCOORD0,
#if !TEXTURE_ATLAS
	       float3 normal : NORMAL,
#endif
	       uniform float4x4 worldViewProj
	       )
{

  VS_OUT outp;
  outp.pos = mul(worldViewProj, pos);
#if TEXTURE_ATLAS
  outp.worldPos = abs(pos + float4(0.5f, 0.5f, 0.5f, 0.5f));//mul(worldMat, pos);
  outp.textureAtlasOffset = float4(0.0f, 0.0f, 0.0f, 0.0f);
 
  float idx = uv1.x * 256.0 -1;
  //float idx = 13.0f;
  float blocky = floor(idx / 16.0);
  float blockx = (idx - blocky * 16.0);
 
  outp.textureAtlasOffset = float4(blockx + 0.25f, blocky + 0.25f, 0, 0) * eOffset ;
#else
  outp.worldPos = float4(normal, 0.0);
  outp.textureAtlasOffset = uv1;
#endif

  return outp;
}

float4 main_fp(
	       VS_OUT In,
	       uniform sampler2D diffuseMap : register(s0),
	       //#if 1
	       uniform float SHC_R_0,uniform float SHC_R_1,uniform float SHC_R_2,uniform float SHC_R_3,uniform float SHC_R_4,uniform float SHC_R_5,uniform float SHC_R_6,uniform float SHC_R_7,uniform float SHC_R_8, uniform float SHC_R_9, uniform float SHC_R_10, uniform float SHC_R_11, uniform float SHC_R_12, uniform float SHC_R_13, uniform float SHC_R_14, uniform float SHC_R_15, uniform float SHC_R_16, uniform float SHC_R_17,
	       uniform float SHC_G_0,uniform float SHC_G_1,uniform float SHC_G_2,uniform float SHC_G_3,uniform float SHC_G_4,uniform float SHC_G_5,uniform float SHC_G_6,uniform float SHC_G_7,uniform float SHC_G_8, uniform float SHC_G_9, uniform float SHC_G_10, uniform float SHC_G_11, uniform float SHC_G_12, uniform float SHC_G_13, uniform float SHC_G_14, uniform float SHC_G_15, uniform float SHC_G_16, uniform float SHC_G_17,
	       uniform float SHC_B_0,uniform float SHC_B_1,uniform float SHC_B_2,uniform float SHC_B_3,uniform float SHC_B_4,uniform float SHC_B_5,uniform float SHC_B_6,uniform float SHC_B_7,uniform float SHC_B_8, uniform float SHC_B_9, uniform float SHC_B_10, uniform float SHC_B_11, uniform float SHC_B_12, uniform float SHC_B_13, uniform float SHC_B_14, uniform float SHC_B_15, uniform float SHC_B_16, uniform float SHC_B_17,
	       //#endif
	       uniform float uLightY
	       ) : COLOR
{

   const float C1 = 0.429043;
  const float C2 = 0.511664;
  const float C3 = 0.743125;
  const float C4 = 0.886227;
  const float C5 = 0.247708;
 const float d1 = -0.081922;
 const float d2 = -0.231710;
 const float d3 = -0.061927;
 const float d4 = -0.087578;
 const float d5 = -0.013847;
 const float d6 = -0.123854;
 const float d7 = -0.231710;
 const float d8 = -0.327688;
 const float3 L00 = float3(SHC_R_0, SHC_G_0, SHC_B_0);
 const float3 L1m1 = float3(SHC_R_1, SHC_G_1, SHC_B_1);
 const float3 L10 = float3(SHC_R_2, SHC_G_2, SHC_B_2);
 const float3 L11 = float3(SHC_R_3, SHC_G_3, SHC_B_3);
 const float3 L2m2 = float3(SHC_R_4, SHC_G_4, SHC_B_4);
 const float3 L2m1 = float3(SHC_R_5, SHC_G_5, SHC_B_5);
 const float3 L20 = float3(SHC_R_6, SHC_G_6, SHC_B_6);
 const float3 L21 = float3(SHC_R_7, SHC_G_7, SHC_B_7);
 const float3 L22 = float3(SHC_R_8, SHC_G_8, SHC_B_8);
 const float3 L4m4 = float3(SHC_R_9, SHC_G_9, SHC_B_9);
 const float3 L4m3 = float3(SHC_R_10, SHC_G_10, SHC_B_10);
 const float3 L4m2 = float3(SHC_R_11, SHC_G_11, SHC_B_11);
 const float3 L4m1 = float3(SHC_R_12, SHC_G_12, SHC_B_12);
 const float3 L40 = float3(SHC_R_13, SHC_G_13, SHC_B_13);
 const float3 L41 = float3(SHC_R_14, SHC_G_14, SHC_B_14);
 const float3 L42 = float3(SHC_R_15, SHC_G_15, SHC_B_15);
 const float3 L43 = float3(SHC_R_16, SHC_G_16, SHC_B_16);
 const float3 L44 = float3(SHC_R_17, SHC_G_17, SHC_B_17);

#if TEXTURE_ATLAS 

 float3 normal = cross(ddy(In.worldPos.xyz),ddx(In.worldPos.xyz));
 normal = normalize(normal);
#else
 float3 normal = In.worldPos.xyz;
#endif
 float3 n = float3(-normal.z, -normal.x, normal.y);

  float4 diffuseColor = float4(1.0, 1.0, 1.0, 1.0);

  diffuseColor.xyz =  C1 * L22 * (n.x * n.x - n.y * n.y) +
                      C3 * L20 * n.z * n.z +
                      C4 * L00 -
                      C5 * L20 +
                      2.0 * C1 * L2m2 * n.x * n.y +
                      2.0 * C1 * L21  * n.x * n.z +
                      2.0 * C1 * L2m1 * n.y * n.z +
                      2.0 * C2 * L11  * n.x +
                      2.0 * C2 * L1m1 * n.y +
    2.0 * C2 * L10  * n.z
#if FULLBAND
+
    d1 * L4m4 * (n.x*n.x*(n.x*n.x-3.0*n.y*n.y) - n.y*n.y * (3.0*n.x*n.x-n.y*n.y)) +
    d2 * L4m3 * (n.x*n.z*(n.x*n.x-3.0*n.y*n.y)) +
    d3 * L4m2 * ((n.x*n.x-n.y*n.y)*(7.0*n.z*n.z-1.0)) + 
    d4 * L4m1 * ((n.x*n.z*(7.0*n.z*n.z-3.0))) + 
    d5 * L40 * (35.0*n.z*n.z*n.z*n.z - 30.0*n.z*n.z + 3.0) + 
    d4 * L41 * (n.y*n.z*(7.0*n.z*n.z-3.0)) + 
    d6 * L42 * (n.x*n.y*(7.0*n.z*n.z-1.0)) + 
    d7 * L43 * (n.y*n.z*(3.0*n.x*n.x-n.y*n.y)) + 
    d8 * L44 * (n.x*n.y*(n.x*n.x-n.y*n.y));
#endif

  //diffuseColor *= 0.000035;
#if TEXTURE_ATLAS
  float2 uv0 = float2(1.0, 1.0);
  if(normal.x > 0.5)
    {
      uv0 = frac(float2(-In.worldPos.z, -In.worldPos.y));
    }
  
  if(normal.x < -0.5)
    {
      uv0 = frac(float2(-In.worldPos.z, In.worldPos.y));
      }
  //top
  
  if(normal.y > 0.5)
    {
      uv0 = frac(In.worldPos.xz);
    }
  
  //bottom
  if(normal.y < -0.5)
    {
      uv0 = frac(float2(-In.worldPos.x, In.worldPos.z));
    }
  
  if(normal.z > 0.5)
    {
      uv0 = frac(float2(In.worldPos.x, -In.worldPos.y));
      //uv0 = float2(In.worldPos.x, -In.worldPos.y);
    }
  if(normal.z < -0.5)
    {
      uv0 = frac(float2(-In.worldPos.x,-In.worldPos.y));
    }
 
  In.textureAtlasOffset += float4(uv0 * 0.5, 0.0, 0.0) * eOffset; /// 2.0);

#endif
  float4 texDiffuse = tex2D(diffuseMap, In.textureAtlasOffset.xy);
  float nightMulti;

  nightMulti = 1.0;
  if(uLightY < 0.0)
    nightMulti = lerp(0.05, 0.1, -uLightY);
  
  float4 vColor = float4(texDiffuse.xyz * diffuseColor.xyz * nightMulti,texDiffuse.w);
  //float4 vColor = float4(diffuseColor.xyz * nightMulti, 1.0);
  return vColor;
}

void geom_vs(
	     in float4 p : POSITION, 
	     out float4 cp : POSITION,
	     out float4 vp : TEXCOORD0,
	     uniform float4x4 wvpMat, uniform float4x4 wvMat)
{
  cp = mul(wvpMat, p);

  vp = mul(wvMat, p);

}

struct geomOut
{
	float4 c : COLOR0;
};

geomOut geom_ps(
		in float4 vp : TEXCOORD0, uniform float far
	       )
{
  geomOut OUT;
  float coeff = 0.25;

  float3 normal = cross(ddy(vp.xyz), ddx(vp.xyz));
  normal = normalize(normal);
  OUT.c = float4(length(vp.xyz) * coeff / far, normal);

  return OUT;
}

